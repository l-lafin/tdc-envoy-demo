static_resources:
  listeners:
    - address:
        # Defines the address and port that the Envoy will be listening to intercept the requests.
        # In this example, Envoy is listening to requests that will reach port 443.
        socket_address:
          address: 0.0.0.0
          port_value: 443
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                codec_type: auto
                stat_prefix: ingress_http
                access_log:
                  name: envoy.access_loggers
                  typed_config:
                    '@type': type.googleapis.com/envoy.extensions.access_loggers.file.v3.FileAccessLog
                    path: /dev/stdout
                route_config:
                  name: router_ssl
                  virtual_hosts:
                    - name: to_apps
                      domains:
                        - '*'
                      # Defines the routing rules for all incoming request.
                      # The order of the rules matters and Envoy will use the first rule that fits the request.
                      routes:
                        # Defines a routing rule for the path '/digihero' that will redirect the request to the application Digihero.
                        - match:
                            prefix: /digihero
                          route:
                            cluster: digihero.gateway
                        # Defines a default routing rule that will redirect the request to the Landingpage.
                        - match:
                            prefix: /
                          route:
                            cluster: landinpage
                # Defines a set of filters/actions to be executed on each incoming request.
                # The filters order matters and Envoy will execute one filter after another.
                http_filters:
                  # Sets Envoy to use the routing configuration defined.
                  - name: envoy.filters.http.router
                    typed_config: {}
          transport_socket:
            # Adds TLS rules for the dowstream services.
            name: envoy.transport_sockets.tls
            typed_config:
              '@type': type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
              common_tls_context:
                tls_params:
                  tls_minimum_protocol_version: TLSv1_2
                # Add needed certificates.
                tls_certificates:
                  - certificate_chain:
                      filename: /etc/ssl/cert.crt
                    private_key:
                      filename: /etc/ssl/cert.key

  clusters:
    - name: digihero.gateway
      connect_timeout: 1s
      type: logical_dns
      dns_lookup_family: V4_ONLY
      lb_policy: round_robin
      load_assignment:
        cluster_name: digihero.gateway
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    # Defines the endpoint and port for the cluster. See: docker-compose.yml the network config for the container gateway.
                    socket_address:
                      address: digihero.gateway.apps.internal
                      port_value: 8080
    - name: landinpage
      connect_timeout: 1s
      type: logical_dns
      dns_lookup_family: V4_ONLY
      lb_policy: round_robin
      load_assignment:
        cluster_name: landinpage
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    # Defines the endpoint and port for the cluster. See: docker-compose.yml the network config for the container landingpage.
                    socket_address:
                      address: landinpage.tdc.demo.local
                      port_value: 80

# Defines the administrator/metrics endpoint in port 9090, we can connect tools such as Prometheus to extract metrics from the component.
# This route must not be exposed externally in public environments, but locally in this example, you can reach in the http://localhost:9090
admin:
  access_log_path: '/dev/stdout'
  address:
    socket_address:
      address: 0.0.0.0
      port_value: 9090
